from dash import html, dcc
import dash_bootstrap_components as dbc
from dateutil import parser
import plotly.graph_objects as go
from dateutil import parser



def home_layout():
    return html.Div(
        children=[
            html.Div(
                className="hero",
                children=[
                    html.H1("Water Treatment Data Tool", style={'color': 'lightblue'}),
                    html.P(
                        "Explore, visualize, and gain insights from water treatment data interactively.",
                        style={'color': 'white'}
                    ),
                ],
                style={
                    'backgroundColor': '#1e2130', 'padding': '50px 0',
                    'marginBottom': '30px', 'textAlign': 'center'
                }
            ),
            html.Div(
                className="content",
                children=[
                    html.P(
                        """
                        This application utilizes Plotly/Dash for water treatment data visualization. It serves as a user-friendly endpoint for utilizing an API 
                        that fetches data from the database.
                        """,
                        style={'color': 'white', 'textAlign': 'center'}
                    ),
                    html.P(
                        """
                        You can review specific features and their historical data. The insights generated by the 
                        application can help you understand water quality trends and patterns better.
                        """,
                        style={'color': 'white', 'textAlign': 'center'}
                    ),
                    html.P(
                        """
                        Still work in progress, so new functionality will be added later on.
                        """,
                        style={'color': 'white', 'textAlign': 'center'}
                    ),
                ],
                style={'padding': '0 10%'}
            ),
        ],
        style={'backgroundColor': 'black'}
    )


def create_features_layout(variables):
    
    return html.Div([
        html.H3('Features', style={'textAlign': 'center', 'color': 'lightblue'}),
        html.Div(
            [
                html.Button(
                    dcc.Link(f"{var}", href=f"/features/{var}", style={'textDecoration': 'none', 'color': '#000'}),
                    className='feature-button',
                    style={'display': 'block', 'margin': '10px auto', 'backgroundColor': '#add8e6', 'border': 'none', 'padding': '15px 32px', 'textAlign': 'center', 'textDecoration': 'none', 'display': 'inline-block', 'fontSize': '16px'}
                )
                for var in variables
            ],
            id='features-output',
            style={'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'width': '18rem', 'margin': '0 auto'}
        )
    ], style={'backgroundColor': '#000', 'color': 'lightblue', 'padding': '20px', 'height': '100vh'})

def create_variable_graph(variable, data):
    
    fig = go.Figure()

    times = [parser.parse(d['index']) for d in data]
    #times_labels = [t.strftime("%H") for t in times]
    times_labels = [t.strftime("%H") if i == 0 or times[i-1].strftime("%H") != t.strftime("%H") else "" for i, t in enumerate(times)]


    fig.add_trace(
        go.Scatter(
            x=times,
            y=[d[variable] for d in data],
            mode='lines+markers',
            marker=dict(color='LightSkyBlue')
        )
    )

    fig.update_layout(
        autosize=True,
        width=1400,
        height=600,
        margin=dict(
            l=200,
            r=100,
            b=100,
            t=100,
            pad=10
        ),
        paper_bgcolor="Black",
        plot_bgcolor='Black',
        title=dict(
            text=f"{variable} (last 24 hours 00:00 UTC)",
            font=dict(size=24, color='LightSkyBlue'),
            x=0.5
        ),
        xaxis=dict(
            title="time (hours)",
            titlefont=dict(color='LightSkyBlue'),
            tickvals=times,
            ticktext=times_labels,
            tickangle= 0,
            tickfont=dict(color='LightSkyBlue'),
            gridcolor='DarkBlue'
        ),
        yaxis=dict(
            title=variable,
            titlefont=dict(color='LightSkyBlue'),
            tickfont=dict(color='LightSkyBlue'),
            gridcolor='DarkBlue'
        ),
    )

    return dcc.Graph(figure=fig, style={'display': 'block', 'marginLeft': 'auto', 'marginRight': 'auto'})

def overview_layout(description):
    description = description.round(2)

    description_table = html.Table(
        [html.Thead(html.Tr([html.Th('Stats', style={'border': '1px solid white', 'width': '100px'})] +
                            [html.Th(col, style={'border': '1px solid white', 'width': '100px'}) for col in description.columns]))] +

        [html.Tbody([
            html.Tr(
                [html.Th(description.index[i], style={'border': '1px solid white', 'width': '100px'})] +
                [html.Td(description.iloc[i][col], style={'border': '1px solid white', 'width': '100px'}) for col in description.columns]
            ) for i in range(len(description))
        ])],
    )

    description_text = """
    This is a simple data application providing an overview of a wastewater treatment dataset. 
    The dataset includes real-world measurements as well as synthetic data generated by resampling the original daily dataset to 10 min intervals, 
    forward filling the missing values, and adding some noise to simulate real-world data. 
    On this page, you can see basic statistics of the data, and on the Features page, you have a list of features. 
    Clicking on a feature name will show you a plot of that feature's data from the last 24 hours. 
    """
    description_para = html.P(description_text, style={'color': 'white', 'textAlign': 'justify'})

    layout = html.Div([
        html.H3('Overview', style={'textAlign': 'center', 'color': 'lightblue'}),
        html.Div(description_para, style={'padding': '10px'}),
        html.Div(children=description_table, style={'overflowX': 'auto', 'color': 'white', 'backgroundColor': 'black'}),
    ], style={'backgroundColor': 'black', 'width': '80%', 'margin': '0 auto'})

    return layout
